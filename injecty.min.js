/*! injecty.js - v0.1 - MIT License - https://github.com/h2non/injecty */
!function(r){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var n;"undefined"!=typeof window?n=window:"undefined"!=typeof global?n=global:"undefined"!=typeof self&&(n=self),n.injecty=r()}}(function(){var r,n,t;return function e(r,n,t){function i(u,a){if(!n[u]){if(!r[u]){var c=typeof require=="function"&&require;if(!a&&c)return c(u,!0);if(o)return o(u,!0);throw new Error("Cannot find module '"+u+"'")}var f=n[u]={exports:{}};r[u][0].call(f.exports,function(n){var t=r[u][1][n];return i(t?t:n)},f,f.exports,e,r,n,t)}return n[u].exports}var o=typeof require=="function"&&require;for(var u=0;u<t.length;u++)i(t[u]);return i}({1:[function(r,n,t){{var e=r("./types");var i=e.newPool;var o=r("./utils");var u=o.isFn;var a=o.isArr;var c=o.isStr;var f=o.chain;var v=o.fnName;var l=o.parseArgs}var s=function O(r){return function(n){return r.map[n]}};var p=function S(r){return function(n){return r[n]=void 0}};var d=function q(r){return function(n,t){return u(n)?function(){var t=n;var e=v(t);return e?r.map[e]=t:function(){throw new TypeError("Function must have a name")}()}.call(this):c(n)?r.map[n]=t:function(){throw new TypeError("First argument is invalid")}()}};var y=function F(r){return function(){return r.map={}}};var m=function R(r,n){return function(){var t=[];return n.map(function(n){return function(){var t=r(n);return t===void 0?function(){throw new Error("Dependency not registered: "+t)}():t}.call(this)})}.call(this)};var h=function k(r){return a(r)?r.filter(function(r){return u(r)})[0]:r};var g=function N(r){return u(r)?a(r.$inject)?r.$inject:l(r):a(r)?r.filter(c):void 0};var w=function P(r){return function(){var n=g(r);return a(n)?n:[]}.call(this)};var j=function T(r){return function(n){return function(){var t=g(n);var e=h(n);var i=m(r,t);return e.apply(void 0,i)}.call(this)}};var b=function C(r){return function(n){return r(n)===void 0?false:true}};var x=function D(r){return function(n){return function(){var n=Array.prototype.slice.call(arguments,0);return r.apply(void 0,n)}}};var A=function z(r){return function(n){return c(n)?w(r(n)):w(n)}};var E=function B(r){Object.keys(r).forEach(function(n){return n==="register"||n==="set"||n==="flush"?function(){var t=r[n];return u(t)?r[n]=f(r,t):void 0}.call(this):void 0});return r};var $=t.container=function G(r){return function(){var n=i(r);var t=s(n);var e=d(n);var o=j(t);var u={get:t,require:t,set:e,register:e,invoke:o,inject:x(o),flush:y(n),remove:p(n),$$pool:n.map,annotate:A(t),injectable:b(s)};return E(u)}.call(this)}},{"./types":3,"./utils":4}],2:[function(r,n,t){{var e=r("./utils");var i=e.isFn;var o=r("./container");var u=o.container}var a=function f(){var r=Array.prototype.slice.call(arguments,0);return u.apply(void 0,r)};var c=function v(){var r=Array.prototype.slice.call(arguments,0);return function(){var n=a.apply(void 0,r);n["container"]=v;return n}.call(this)};n.exports=c()},{"./container":1,"./utils":4}],3:[function(r,n,t){{var e=r("./utils");var i=e.isObj}var o=function a(r){return i(r.$$pool)?r.$$pool:r};var u=t.newPool=function c(r){return function(){var n={map:{}};i(r)?n["map"]=Object.create(o(r)):void 0;return n}.call(this)}},{"./utils":4}],4:[function(r,n,t){var e=Object.prototype.toString;var i=new RegExp("^function(\\s*)(\\w*)[^(]*\\(([^)]*)\\)","m");var o=new RegExp("^function\\s*(\\w+)\\s*\\(","i");var u=t.isFn=function d(r){return typeof r==="function"};var a=t.isStr=function y(r){return e.call(r)==="[object String]"};var c=t.isObj=function m(r){return e.call(r)==="[object Object]"};var f=t.isArr=function h(r){return e.call(r)==="[object Array]"};var v=t.toArr=function g(r){return Array.prototype.slice.call(r)};var l=t.chain=function w(r,n){return function(){n.apply(void 0,arguments);return r}};var s=t.fnName=function j(r){return u(r)?r.name?r.name:function(){var n=o.exec(r.toString());return n&&n[1]?n[1]:void 0}.call(this):void 0};var p=t.parseArgs=function b(r){return u(r)?function(){var n=i.exec(r.toString());return n&&n[3]?n[3].split(new RegExp("\\s*,\\s*")):void 0}.call(this):void 0}},{}]},{},[2])(2)});